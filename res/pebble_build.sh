#!/usr/bin/env bash

# Change directory to the project dir.
cd $2

echo "Changed directory to $(pwd)."

# Initial cleanup
pebble clean

# Get the crate name
crate_name=$1

# Build the project through Cargo
cargo +nightly build --release

if [[ ! -d target/thumbv7m-none-eabi/release/deps ]]; then
    >&2 echo "Deps files were not found for target 'thumbv7m-none-eabi'. Are you on the right target? Did the build fail?"
    exit 101
fi

cd target/thumbv7m-none-eabi/release/deps

# Move the crates to a different directory, so that the next commands don't remove them.
mkdir ../crates
mv *.rlib ../crates

# Extract the archive
ar x *.a

# Remove all the mess produced by Rust (shouldn't be a problem if you use the 'compiler-builtins' crate).
find . -type f ! -name '*.rcgu.o' -delete

# Remove the generated object file.
# For some reason, object files generated by Cargo produce a segfault on the 'push' instructions.
rm ${crate_name}*.o

cd -

# Initialize the directories
mkdir rustc_temp

# Build the project through rustc
rustc +nightly -L target/thumbv7m-none-eabi/release/crates --color always --emit=llvm-ir --crate-type=staticlib  \
        --target thumbv7m-none-eabi src/lib.rs -A dead-code -o rustc_temp/lib.ll

# Assemble through LLC
llc -mtriple=thumbv7m-none-eabi -relocation-model=pic -march=thumb \
          -mattr=+thumb2 -mattr=+soft-float -mcpu=cortex-m3 --asm-verbose=false \
          -o rustc_temp/lib.s rustc_temp/lib.ll

# Convert to .o through as
arm-none-eabi-as -c rustc_temp/lib.s -o rustc_temp/lib.o

# Replace the object file we removed earlier with this one
mv rustc_temp/*.o target/thumbv7m-none-eabi/release/deps

# Build through waf
pebble build

# Cleanup
cargo clean
rm -r rustc_temp